import re
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from message_format import escape_markdown
#from c_about import escape_markdown_v2
import logging
import pytz
import base64
from config import TIMEZONE

#–ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏—è
def find_meeting_link(text: str) -> str:
    """
    Searches for Google Meet, Zoom, or Microsoft Teams links in the provided text.
    """
    if not text:
        return None

    # Define patterns for Google Meet, Zoom, and Microsoft Teams
    meet_pattern = r"https?://meet\.google\.com/[a-zA-Z0-9\-]+"
    zoom_pattern = r"https?://[a-z0-9\-\.]*zoom\.us/[a-zA-Z0-9\-/?=&]+"
    teams_pattern = r"https?://teams\.microsoft\.com/l/meetup-join/[0-9a-zA-Z\-]+"

    # Search for links in the text
    for pattern in [meet_pattern, zoom_pattern, teams_pattern]:
        match = re.search(pattern, text)
        if match:
            return match.group(0)

    return None

def get_video_call_link(event: dict) -> str:
    """
    Tries to find a video call link from event's description or event's hangoutLink.
    """
    description_text = event.get('description', '')  # –ó–∞–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    video_call_link = find_meeting_link(description_text) or event.get('hangoutLink')
    return video_call_link or "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

async def send_reminder(bot: Bot, user_id: int, event, event_start, minutes_before: int):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    now = datetime.now(event_start.tzinfo)
    remaining_time = event_start - now  # –í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.debug(f"–°–µ–π—á–∞—Å: {now}, –Ω–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏—è: {event_start}, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_time}")
    
    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
    if timedelta(minutes=minutes_before) <= remaining_time <= timedelta(minutes=minutes_before + 1):
        summary = escape_markdown(event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        hangout_link = event.get('hangoutLink')
        start = event['start'].get('dateTime', event['start'].get('date'))  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end = event['end'].get('dateTime', event['end'].get('date'))  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        location = event.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')  # –õ–æ–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏
        attendees = event.get('attendees', [])  # –£—á–∞—Å—Ç–Ω–∏–∫–∏
        description = escape_markdown(event.get('description', '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:150])  # Truncate description
        video_call_link = get_video_call_link(event)
        
        #–∑–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        event_id = event['id']
        calendar_id = "primary"  # Replace with the actual calendar ID if available
        encoded_event_id = base64.urlsafe_b64encode(f"{event_id} {calendar_id}".encode()).decode()

        # Build the calendar event link
        calendar_event_link = f"https://calendar.google.com/calendar/event?eid={encoded_event_id}"

        tomorrow = now + timedelta(days=1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        keyboard = None
        if video_call_link and video_call_link != "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–≤–æ–Ω–∫—É", url=video_call_link.strip())
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])

        if start:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑ UTC –≤ –Ω—É–∂–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            start_time = datetime.fromisoformat(start).astimezone(pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
            start_time = start_time.astimezone(TIMEZONE)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –¥–∞—Ç—É
            start_time_str = start_time.strftime("%d.%m.%Y %H:%M") if start_time.date() == tomorrow.date() else start_time.strftime("%H:%M")
        else:
            start_time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        if end:
            end_time = datetime.fromisoformat(end).astimezone(pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
            end_time = end_time.astimezone(TIMEZONE)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            end_time_str = end_time.strftime("%H:%M")
        else:
            end_time_str = ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        attendees_list = [a.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫') for a in attendees]
        attendees_str = "; ".join([f"{a}" for a in attendees_list]) if attendees_list else "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤
        if len(attendees_str) > 150:
            attendees_str = attendees_str[:150] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ

        summary = escape_markdown(summary)
        start_time_str = escape_markdown(start_time_str)
        end_time_str = escape_markdown(end_time_str)
        location = escape_markdown(location)
        attendees_str = escape_markdown(attendees_str)

        notification_message = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\!\n–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ *{summary}* –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {minutes_before} –º–∏–Ω—É—Ç\!\n"
            f"üóì {start_time_str} \- {end_time_str} \| "
            f"*[{summary}]({calendar_event_link})*\n\n"
            f"üìç –ú–µ—Å—Ç–æ: {location}\n"
            f"üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees_str}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        )
       
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_message,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
    else:
        logging.debug("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ª–æ–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
