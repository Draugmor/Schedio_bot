# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

# –ú–æ–¥—É–ª–∏ –∏ –ø–∞–∫–µ—Ç—ã
import asyncio
import logging
import os
import re

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏
from aiocron import crontab
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏
from c_about import send_about_info
from config import active_users, user_settings, TIMEZONE, API_TOKEN
from event_checker import check_and_notify_events
from event_creation import (
    create_google_calendar_event,
    normalize_date,
    validate_date,
    validate_duration,
    validate_time,
)

from event_keyboards import (
    get_cancel_keyboard,
    get_confirmation_keyboard,
    get_date_selection_keyboard,
    get_duration_selection_keyboard,
    get_edit_options_keyboard,
    get_time_selection_keyboard,
    get_description_keyboard,
    get_main_keyboard
)

from event_states import EventCreationStates

from google_calendar import (
    authenticate_google_calendar,
    complete_authentication,
    generate_google_meet_link,
    get_auth_url,
    get_calendar_service,
    get_current_event,
    get_next_event,
    get_todays_events,
    get_tomorrows_events,
    get_upcoming_events,
    reauthenticate_google_calendar,
)
from message_format import format_event

logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, DEBUG, WARNING, ERROR, CRITICAL)
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)
logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É

async def check_auth(user_id: int, message: Message = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in active_users:
        return True
        
    # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    creds = authenticate_google_calendar(user_id)
    if creds:
        active_users[user_id] = creds
        return True
        
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω message - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if message:
        auth_url, _ = get_auth_url(user_id)
        await message.answer(
            "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ [Google Authorization]({auth_url})",
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="request_auth")
            ]])
        )
    return False

async def is_in_event_creation(state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    current_state = await state.get_state()
    return current_state is not None and current_state.startswith("EventCreationStates")

async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç check_and_notify_events –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."""
    while True:
        try:
            await asyncio.sleep(60)
            await check_and_notify_events(bot)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {str(e)}")

def escape_markdown_v2(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)

class AuthStates(StatesGroup):
    waiting_for_code = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def send_welcome(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        is_auth = check_auth(user_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if is_auth:
            await message.answer(
                "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
            return
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parts = message.text.split()
        code = parts[1] if len(parts) > 1 else None

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–¥, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if code:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {code}")
            data = await state.get_data()
            flow = data.get("flow")
            
            if not flow:
                await message.reply("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                return
            
            try:
                creds = complete_authentication(user_id, code)
                active_users[user_id] = creds
                await state.clear()
                await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ complete_authentication: {str(e)}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                return
        
        creds = authenticate_google_calendar(user_id)
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if not creds:
            auth_url, flow = get_auth_url(user_id)  # –ü–æ–ª—É—á–∞–µ–º URL –∏ flow
            await state.update_data(flow=flow)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º flow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.set_state(AuthStates.waiting_for_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç\! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –í–∞—Å –≤–∏–¥–µ—Ç—å\!\n\n üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ [Google Authorization]({auth_url})\.\n\n"
                "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        active_users[user_id] = creds
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç\! –Ø Schedio –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏\! "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã\:\n/today, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, \n"
            "/tomorrow, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞, \n"
            "/now \- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É,\n"
            "/next \- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é \(–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è\),\n"
            "/generate_meet_link \- —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ google meet, \n"
            "–∏ /relogin –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\.\n\n /about —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\.\n\n",
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

@router.message(Command('today'))
async def send_todays_events(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    try:
        if not await check_auth(user_id, message):
            return
        events = get_todays_events(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
        if not events:
            await message.reply("–°–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for event in events:
            formatted_message, keyboard = format_event(event)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await message.reply(
                text=formatted_message,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

@router.message(Command('tomorrow'))
async def send_tomorrows_events(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    user_id = message.from_user.id
    try:
        if not await check_auth(user_id, message):
            return        
        events = get_tomorrows_events(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
        if not events:
            await message.reply("–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for event in events:
            formatted_message, keyboard = format_event(event)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await message.reply(
                text=formatted_message,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

@router.message(Command('relogin'))
async def relogin(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ä–µ–ª–æ–≥–∏–Ω)"""
    try:
        user_id = message.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
        token_path = f'user_tokens/token_{user_id}.pickle'
        if os.path.exists(token_path):
            os.remove(token_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url, flow = get_auth_url(user_id)  # –ü–æ–ª—É—á–∞–µ–º URL –∏ flow
        await state.update_data(flow=flow)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º flow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(AuthStates.waiting_for_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        
        await message.reply(
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
            f"1\. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [Google Authorization]({auth_url})\n"
            "2\. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
            "3\. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–ª–æ–≥–∏–Ω–µ: {str(e)}")

@router.message(Command('now'))
async def send_current_event(message: types.Message):
    user_id = message.from_user.id
    try:
        if not await check_auth(user_id, message):
            return
        current_event = get_current_event(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏

        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –µ—Å—Ç—å
        if current_event:
            formatted_message, keyboard = format_event(current_event)
            await message.reply(
                text=f"_–¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:_\n{formatted_message}",
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=get_main_keyboard()
            )
        else:
            await message.reply("–°–µ–π—á–∞—Å –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

@router.message(Command('next'))
async def send_next_event(message: types.Message):
    user_id = message.from_user.id
    try:
        if not await check_auth(user_id, message):
            return
        next_event = get_next_event(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏

        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –µ—Å—Ç—å
        if next_event:
            formatted_message, keyboard = format_event(next_event)
            await message.reply(
                text=f"_–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞_:\n{formatted_message}",
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=get_main_keyboard()
            )
        else:
            await message.reply("–°–ª–µ–¥—É—é—â–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

@router.message(Command('generate_meet_link'))
async def generate_meet_link_command(message: types.Message):
    user_id = message.from_user.id
    try:
        if not await check_auth(user_id, message):
            return
        meet_link = generate_google_meet_link(user_id)
        if meet_link != "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            await message.reply(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: {meet_link}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('set_reminder_15'))
async def set_reminder_15(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 15:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 15  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_10'))
async def set_reminder_10(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 10:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 10  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_5'))
async def set_reminder_5(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 5:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 5  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_0'))
async def set_reminder_0(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 0:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 0  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('logout'))
async def logout(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google"""
    user_id = message.from_user.id
    token_path = f'user_tokens/token_{user_id}.pickle'
    
    if os.path.exists(token_path):
        os.remove(token_path)
        if user_id in active_users:
            del active_users[user_id]
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google.")
    else:
        await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

@router.message(Command('about'))
async def about_command(message: types.Message):
    await send_about_info(message)

@router.message(AuthStates.waiting_for_code)
async def process_auth_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        data = await state.get_data()
        flow = data.get("flow")
        
        if not flow:
            await message.reply("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            await state.clear()
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        creds = complete_authentication(user_id, message.text.strip())  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        active_users[user_id] = creds
        
        await state.clear()
        await message.reply(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "/today ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/tomorrow ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/now ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
            "/next ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
            "/generate_meet_link ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet\n\n"
            "/about ‚Äî —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –æ–Ω –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ!\n"
        )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π ===== #

@router.message(Command('create_event'))
async def start_event_creation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_title)
    await message.answer(
        "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(EventCreationStates.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if len(message.text) > 120:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 120 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(EventCreationStates.waiting_for_date)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_date_selection_keyboard()
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_date:"))
async def process_selected_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    date = callback.data.split(":")[1]
    await state.update_data(date=date)
    await state.set_state(EventCreationStates.waiting_for_time)
    await callback.message.edit_text(
        "‚åö –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=get_time_selection_keyboard()
    )

@router.callback_query(F.data == "manual_date_input")
async def request_manual_date(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    await state.set_state(EventCreationStates.waiting_for_date)
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(EventCreationStates.waiting_for_date)
async def process_event_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    if not validate_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì")
        return
    
    normalized_date = normalize_date(message.text)
    await state.update_data(date=normalized_date)
    await state.set_state(EventCreationStates.waiting_for_time)
    await message.answer(
        "‚åö –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=get_time_selection_keyboard()
    )

@router.callback_query(F.data.startswith("select_time:"))
async def process_selected_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time = callback.data.split(":")[1]
    if ':' not in time:
        time += ':00'
    await state.update_data(time=time)
    await state.set_state(EventCreationStates.waiting_for_duration)
    await callback.message.edit_text(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=get_duration_selection_keyboard()
    )

@router.callback_query(F.data == "manual_time_input")
async def request_manual_time(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(EventCreationStates.waiting_for_time)
    await callback.message.edit_text(
        "‚åö –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(EventCreationStates.waiting_for_time)
async def process_event_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    if not validate_time(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
        return
    time = message.text
    if ':' not in time:
        time += ':00'

    await state.update_data(time=message.text)
    await state.set_state(EventCreationStates.waiting_for_duration)
    await message.answer(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=get_duration_selection_keyboard()
    )

@router.callback_query(F.data.startswith("select_duration:"))
async def process_selected_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration = callback.data.split(":")[1]
    await state.update_data(duration=duration)
    await state.set_state(EventCreationStates.waiting_for_description)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_description_keyboard()
    )

@router.callback_query(F.data == "manual_duration_input")
async def request_manual_duration(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await state.set_state(EventCreationStates.waiting_for_duration)
    await callback.message.edit_text(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –¥–ª—è 30 –º–∏–Ω—É—Ç):\n"
        "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç 0.25 (15 –º–∏–Ω) –¥–æ 8 —á–∞—Å–æ–≤.",
        reply_markup=get_cancel_keyboard()
    )

@router.message(EventCreationStates.waiting_for_duration)
async def process_event_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not validate_duration(message.text):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –¥–ª—è 30 –º–∏–Ω—É—Ç).\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç 0.25 (15 –º–∏–Ω) –¥–æ 8 —á–∞—Å–æ–≤."
        )
        return
    
    await state.update_data(duration=message.text)
    await state.set_state(EventCreationStates.waiting_for_description)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(EventCreationStates.waiting_for_description, Command('skip'))
@router.message(EventCreationStates.waiting_for_description, F.text == '')
async def skip_event_description(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description='')
    await show_event_summary(message, state)

@router.message(EventCreationStates.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if len(message.text) > 1000:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_description_keyboard())
        return
    
    await state.update_data(description=message.text)
    await show_event_summary(message, state)

async def show_event_summary(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    from datetime import datetime, timedelta  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    from event_keyboards import get_meet_link_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    time_str = data['time']
    if ':' not in time_str:
        time_str += ':00'
    start_datetime = datetime.strptime(f"{data['date']} {time_str}", "%d.%m.%Y %H:%M")
    end_datetime = start_datetime + timedelta(hours=float(data['duration']))
    time_range = f"{time_str} - {end_datetime.strftime('%H:%M')}"
    
    summary = (
        "üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n\n"
        "üìÖ *–î–∞—Ç–∞:* {date}\n"
        "‚åö *–í—Ä–µ–º—è:* {time_range}\n"
        "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
        "–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet?"
    ).format(
        title=escape_markdown_v2(data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')),
        date=escape_markdown_v2(data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
        time_range=escape_markdown_v2(time_range),
        description=escape_markdown_v2(data.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))
    )
    
    await state.set_state(EventCreationStates.meet_link_choice)
    await message.answer(
        summary,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=get_meet_link_keyboard()
    )

@router.callback_query(F.data == "confirm_event")
async def confirm_event_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    data = await state.get_data()
    success, message = await create_google_calendar_event(callback.from_user.id, data)
    
    await callback.message.edit_text(
        message, 
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.clear()

@router.callback_query(F.data == "edit_event")
async def edit_event_data(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è"""
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_options_keyboard()
    )

@router.callback_query(F.data == "cancel_creation")
async def cancel_event_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@router.callback_query(F.data == "edit_title")
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_title)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )

@router.callback_query(F.data == "edit_date")
async def edit_event_date(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_date)
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_date_selection_keyboard()
    )

@router.callback_query(F.data == "edit_time")
async def edit_event_time(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_time)
    await callback.message.edit_text(
        "‚åö –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=get_time_selection_keyboard()
    )

@router.callback_query(F.data == "edit_duration")
async def edit_event_duration(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_duration)
    await callback.message.edit_text(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=get_duration_selection_keyboard()
    )

@router.callback_query(F.data == "edit_description")
async def edit_event_description(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.set_state(EventCreationStates.waiting_for_description)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_description_keyboard()
    )

@router.callback_query(F.data == "skip_description")
async def skip_description_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description='')
    await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    await show_event_summary(callback.message, state)

@router.callback_query(F.data.startswith("create_meet_link:"))
async def process_meet_link_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Meet —Å—Å—ã–ª–∫–∏"""
    choice = callback.data.split(":")[1]
    await state.update_data(create_meet_link=(choice == "yes"))
    await show_confirmation(callback.message, state)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ show_confirmation

async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è"""
    from datetime import datetime, timedelta
    
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    time_str = data['time']
    if ':' not in time_str:
        time_str += ':00'
    start_datetime = datetime.strptime(f"{data['date']} {time_str}", "%d.%m.%Y %H:%M")
    end_datetime = start_datetime + timedelta(hours=float(data['duration']))
    time_range = f"{time_str} - {end_datetime.strftime('%H:%M')}"
    
    meet_status = "–î–∞" if data.get('create_meet_link', False) else "–ù–µ—Ç"
    
    summary = (
        "üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n\n"
        "üìÖ *–î–∞—Ç–∞:* {date}\n"
        "‚åö *–í—Ä–µ–º—è:* {time_range}\n"
        "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        "üîó *Google Meet:* {meet_status}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è?"
    ).format(
        title=escape_markdown_v2(data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')),
        date=escape_markdown_v2(data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
        time_range=escape_markdown_v2(time_range),
        description=escape_markdown_v2(data.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')),
        meet_status=escape_markdown_v2(meet_status)
    )
    
    await state.set_state(EventCreationStates.confirmation)
    await message.answer(
        summary,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(F.data == "create_event")
async def create_event_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await start_event_creation(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "next_event")
async def next_event_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id not in active_users:
            creds = authenticate_google_calendar(user_id)
            if creds:
                active_users[user_id] = creds
            else:
                await callback.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
                return

        await send_next_event(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in next_event_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "today_events")
async def today_events_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id not in active_users:
            creds = authenticate_google_calendar(user_id)
            if creds:
                active_users[user_id] = creds
            else:
                await callback.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
                return
            
        await send_todays_events(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in today_events_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tomorrow_events")
async def tomorrow_events_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id not in active_users:
            creds = authenticate_google_calendar(user_id)
            if creds:
                active_users[user_id] = creds
            else:
                await callback.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
                return
    
        await send_tomorrows_events(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in tomorrow_events_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "generate_meet")
async def generate_meet_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id not in active_users:
            creds = authenticate_google_calendar(user_id)
            if creds:
                active_users[user_id] = creds
            else:
                await callback.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
                return
        
        await generate_meet_link_command(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in generate_meet_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message()
async def handle_other_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∫–∞–∑–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not await is_in_event_creation(state):
        if await check_auth(message.from_user.id, message):
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º cron job –≤–Ω—É—Ç—Ä—å main
    @crontab('*/1 * * * *')  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    async def cron_job():
        await check_and_notify_events(bot)
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())