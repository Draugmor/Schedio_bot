#import datetime
import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from google_calendar import authenticate_google_calendar, get_auth_url, reauthenticate_google_calendar, get_todays_events, get_tomorrows_events, get_current_event, get_next_event, generate_google_meet_link, get_upcoming_events, complete_authentication, get_calendar_service
from message_format import format_event
import logging
import os
from event_checker import check_and_notify_events
from config import active_users, user_settings, TIMEZONE, API_TOKEN
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiocron import crontab
from c_about import send_about_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, DEBUG, WARNING, ERROR, CRITICAL)
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)
logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É

async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç check_and_notify_events –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."""
    while True:
        try:
            await asyncio.sleep(60)
            await check_and_notify_events(bot)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {str(e)}")

def escape_markdown_v2(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)

class AuthStates(StatesGroup):
    waiting_for_code = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def send_welcome(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parts = message.text.split()
        code = parts[1] if len(parts) > 1 else None

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–¥, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if code:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {code}")
            data = await state.get_data()
            flow = data.get("flow")
            
            if not flow:
                await message.reply("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                return
            
            try:
                creds = complete_authentication(user_id, code)
                active_users[user_id] = creds
                await state.clear()
                await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ complete_authentication: {str(e)}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                return
        
        creds = authenticate_google_calendar(user_id)
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if not creds:
            auth_url, flow = get_auth_url(user_id)  # –ü–æ–ª—É—á–∞–µ–º URL –∏ flow
            await state.update_data(flow=flow)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º flow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.set_state(AuthStates.waiting_for_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç\! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –í–∞—Å –≤–∏–¥–µ—Ç—å\!\n\n üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ [Google Authorization]({auth_url})\.\n\n"
                "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        active_users[user_id] = creds
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç\! –Ø Schedio –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏\! "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã\:\n/today, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, \n"
            "/tomorrow, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞, \n"
            "/now \- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É,\n"
            "/next \- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é \(–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è\),\n"
            "/generate_meet_link \- —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ google meet, \n"
            "–∏ /relogin –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\.\n\n /about —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\.\n\n",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

@router.message(Command('today'))
async def send_todays_events(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    try:
        events = get_todays_events(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
        if not events:
            await message.reply("–°–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for event in events:
            formatted_message, keyboard = format_event(event)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await message.reply(
                text=formatted_message,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('tomorrow'))
async def send_tomorrows_events(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Calendar
        user_id = message.from_user.id
        events = get_tomorrows_events(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
        if not events:
            await message.reply("–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for event in events:
            formatted_message, keyboard = format_event(event)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await message.reply(
                text=formatted_message,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('relogin'))
async def relogin(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ä–µ–ª–æ–≥–∏–Ω)"""
    try:
        user_id = message.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
        token_path = f'user_tokens/token_{user_id}.pickle'
        if os.path.exists(token_path):
            os.remove(token_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url, flow = get_auth_url(user_id)  # –ü–æ–ª—É—á–∞–µ–º URL –∏ flow
        await state.update_data(flow=flow)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º flow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(AuthStates.waiting_for_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        
        await message.reply(
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
            f"1\. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [Google Authorization]({auth_url})\n"
            "2\. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
            "3\. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–ª–æ–≥–∏–Ω–µ: {str(e)}")

@router.message(Command('now'))
async def send_current_event(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏."""
    try:
        user_id = message.from_user.id
        current_event = get_current_event(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏

        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –µ—Å—Ç—å
        if current_event:
            formatted_message, keyboard = format_event(current_event)
            await message.reply(
                text=f"_–¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:_\n{formatted_message}",
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )
        else:
            await message.reply("–°–µ–π—á–∞—Å –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('next'))
async def send_next_event(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏."""
    try:
        user_id = message.from_user.id
        next_event = get_next_event(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏

        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –µ—Å—Ç—å
        if next_event:
            formatted_message, keyboard = format_event(next_event)
            await message.reply(
                text=f"_–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞_:\n{formatted_message}",
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )
        else:
            await message.reply("–°–ª–µ–¥—É—é—â–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('generate_meet_link'))
async def generate_meet_link_command(message: types.Message):
    try:
        user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        meet_link = generate_google_meet_link(user_id)
        if meet_link != "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            await message.reply(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: {meet_link}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command('set_reminder_15'))
async def set_reminder_15(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 15:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 15  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_10'))
async def set_reminder_10(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 10:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 10  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_5'))
async def set_reminder_5(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 5:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 5  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('set_reminder_0'))
async def set_reminder_0(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç"""
    user_id = message.from_user.id
    if user_settings.get(user_id) == 0:
        user_settings.pop(user_id)  # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        user_settings[user_id] = 0  # –í–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 0 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.")

@router.message(Command('logout'))
async def logout(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google"""
    user_id = message.from_user.id
    token_path = f'user_tokens/token_{user_id}.pickle'
    
    if os.path.exists(token_path):
        os.remove(token_path)
        if user_id in active_users:
            del active_users[user_id]
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google.")
    else:
        await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

@router.message(Command('about'))
async def about_command(message: types.Message):
    await send_about_info(message)

@router.message(AuthStates.waiting_for_code)
async def process_auth_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        data = await state.get_data()
        flow = data.get("flow")
        
        if not flow:
            await message.reply("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            await state.clear()
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        creds = complete_authentication(user_id, message.text.strip())  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        active_users[user_id] = creds
        
        await state.clear()
        await message.reply(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "/today ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/tomorrow ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/now ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
            "/next ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
            "/generate_meet_link ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet\n\n"
            "/about ‚Äî —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –æ–Ω –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ!\n"
        )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    @crontab('*/1 * * * *')  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    async def cron_job():
        await check_and_notify_events(bot)
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())