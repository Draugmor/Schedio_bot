import re
import asyncio
from datetime import datetime, timedelta
from typing import Tuple

async def create_google_calendar_event(user_id: int, event_data: dict) -> Tuple[bool, str]:
    try:
        from google_calendar import authenticate_google_calendar, get_calendar_service
        
        creds = await asyncio.to_thread(authenticate_google_calendar, user_id)
        if not creds:
            return False, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Calendar. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /relogin"

        service = await asyncio.to_thread(get_calendar_service, creds)
        if not service:
            return False, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Calendar"

        time_str = event_data['time']
        if ':' not in time_str:
            time_str += ':00'
            
        start_datetime = datetime.strptime(
            f"{event_data['date']} {time_str}", 
            "%d.%m.%Y %H:%M"
        )
        end_datetime = start_datetime + timedelta(hours=float(event_data['duration']))

        event = {
            'summary': event_data['title'],
            'description': event_data.get('description', ''),
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': 'Europe/Moscow',
            },
            'end': {
                'dateTime': end_datetime.isoformat(),
                'timeZone': 'Europe/Moscow',
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º conferenceData —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if event_data.get('create_meet_link', False):
            event['conferenceData'] = {
                'createRequest': {
                    'requestId': f"{user_id}_{int(datetime.now().timestamp())}",
                    'conferenceSolutionKey': {'type': 'hangoutsMeet'}
                }
            }

        created_event = await asyncio.to_thread(
            lambda: service.events().insert(
                calendarId='primary', 
                body=event,
                conferenceDataVersion=1 if event_data.get('create_meet_link', False) else 0
            ).execute()
        )
        
        event_link = created_event.get('htmlLink')
        meet_link = created_event.get('hangoutLink', '')
        
        return True, format_success_message(event_data, event_link, meet_link)
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}"

def format_success_message(event_data: dict, event_link: str = None, meet_link: str = None) -> str:
    from html import escape
    time_str = event_data['time']
    if ':' not in time_str:
        time_str += ':00'
    
    start_datetime = datetime.strptime(
        f"{event_data['date']} {time_str}", 
        "%d.%m.%Y %H:%M"
    )
    end_datetime = start_datetime + timedelta(hours=float(event_data['duration']))
    
    event_time = f"{start_datetime.strftime('%H:%M')} - {end_datetime.strftime('%H:%M')}"
    
    title_link = f'<a href="{event_link}">{escape(event_data["title"])}</a>' if event_link else escape(event_data["title"])
    
    meet_info = ""
    if meet_link:
        meet_info = f"\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: {meet_link}"
    else:
        meet_info = "\n\n‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å"
    
    return (
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üóì {escape(event_data['date'])} {event_time} | {title_link}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape(event_data.get('description', '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'))}"
        f"{meet_info}"
    )

def validate_date(date_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
    Returns:
        bool: –í–∞–ª–∏–¥–Ω–∞ –ª–∏ –¥–∞—Ç–∞
    """
    for fmt in ("%d.%m.%Y", "%d-%m-%Y", "%d/%m/%Y"):
        try:
            datetime.strptime(date_str, fmt)
            return True
        except ValueError:
            continue
    return False

def normalize_date(date_str: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É DD.MM.YYYY
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
    Returns:
        str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    """
    for fmt in ("%d.%m.%Y", "%d-%m-%Y", "%d/%m/%Y"):
        try:
            dt = datetime.strptime(date_str, fmt)
            return dt.strftime("%d.%m.%Y")
        except ValueError:
            continue
    return date_str

def validate_time(time_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ–ø—É—Å–∫–∞–µ—Ç –∫–∞–∫ –ß–ß:–ú–ú, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ –ß–ß)
    """
    if ':' in time_str:
        return bool(re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str))
    else:
        return bool(re.match(r'^([0-1]?[0-9]|2[0-3])$', time_str))
    
def validate_duration(duration_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    Args:
        duration_str: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    Returns:
        bool: –í–∞–ª–∏–¥–Ω–∞ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """
    try:
        duration = float(duration_str)
        return 0.25 <= duration <= 8  # –æ—Ç 15 –º–∏–Ω –¥–æ 8 —á–∞—Å–æ–≤
    except ValueError:
        return False