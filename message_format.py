import re
from datetime import datetime, timedelta, timezone
import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import base64
import logging

TIMEZONE = pytz.timezone('Europe/Moscow')

import re

def escape_markdown(text):
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Markdown (–ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram)
    escape_chars = r'_*[]()~`>#+-=|{}!'
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –µ—â–µ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω
    text = re.sub(r'(?<!\\)([{}])'.format(re.escape(escape_chars)), r'\\\1', text)

    # –û—Ç–¥–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º `.`, —Ç–∞–∫ –∫–∞–∫ Telegram –æ–∂–∏–¥–∞–µ—Ç `\.` –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    text = re.sub(r'(?<!\\)\.', r'\\.', text)

    return text

def find_meeting_link(text: str) -> str:
    """
    Searches for Google Meet, Zoom, or Microsoft Teams links in the provided text.
    """
    if not text:
        return None

    # Define patterns for Google Meet, Zoom, and Microsoft Teams
    meet_pattern = r"https?://meet\.google\.com/[a-zA-Z0-9\-]+"
    zoom_pattern = r"https?://[a-z0-9\-\.]*zoom\.us/[a-zA-Z0-9\-/?=&]+"
    teams_pattern = r"https?://teams\.microsoft\.com/l/meetup-join/[0-9a-zA-Z\-]+"

    # Search for links in the text
    for pattern in [meet_pattern, zoom_pattern, teams_pattern]:
        match = re.search(pattern, text)
        if match:
            return match.group(0)

    return None

def get_video_call_link(event: dict) -> str:
    """
    Tries to find a video call link from event's description or event's hangoutLink.
    """
    description_text = event.get('description', '')  # –ó–∞–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    video_call_link = find_meeting_link(description_text) or event.get('hangoutLink')
    return video_call_link or "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

def format_event(event):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2.
    """
    summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    start = event['start'].get('dateTime', event['start'].get('date'))  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    end = event['end'].get('dateTime', event['end'].get('date'))  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    location = event.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')  # –õ–æ–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏
    attendees = event.get('attendees', [])  # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    conference_data = event.get('conferenceData', {})  # –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
    description = escape_markdown(event.get('description', '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:150])  # Truncate description
    video_call_link = get_video_call_link(event)

    #–∑–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    event_id = event['id']
    calendar_id = "primary"  # Replace with the actual calendar ID if available
    encoded_event_id = base64.urlsafe_b64encode(f"{event_id} {calendar_id}".encode()).decode()

    # Build the calendar event link
    calendar_event_link = f"https://calendar.google.com/calendar/event?eid={encoded_event_id}"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now(timezone.utc)
    tomorrow = now + timedelta(days=1)
    tomorrow_start = tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)  # –ù–∞—á–∞–ª–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
    summary = escape_markdown(summary)
    location = escape_markdown(location)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    if start:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑ UTC –≤ –Ω—É–∂–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        start_time = datetime.fromisoformat(start).astimezone(pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
        start_time = start_time.astimezone(TIMEZONE)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        today = datetime.now(TIMEZONE).date()
        start_time_str = (
            start_time.strftime("%H:%M") if start_time.date() == today 
            else start_time.strftime("%d.%m.%Y %H:%M")
        )
        start_time_str = escape_markdown(start_time_str)
    else:
        start_time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    if end:
        end_time = datetime.fromisoformat(end).astimezone(pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
        end_time = end_time.astimezone(TIMEZONE)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        end_time_str = end_time.strftime("%H:%M")
        end_time_str = escape_markdown(end_time_str)
    else:
        end_time_str = ""

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    attendees_list = [a.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫') for a in attendees]
    attendees_str = ", ".join([f"{a}" for a in attendees_list]) if attendees_list else "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤
    if len(attendees_str) > 150:
        attendees_str = attendees_str[:150] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ

    attendees_str = escape_markdown(attendees_str)

    # –°–±–æ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    formatted_message = (
        f"üóì {start_time_str} \\- {end_time_str} \\| "
        f"*[{summary}]({calendar_event_link})*\n\n"
        f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        f"üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees_str}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = None
    if video_call_link and video_call_link != "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
        button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–≤–æ–Ω–∫—É", url=video_call_link.strip())
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return formatted_message, keyboard